library(devtools)
use_mit_license()
library(devtools)
use_r("jashoneda")
use_data_raw()
check()
pacman::p_load(tidyverse)
getwd()
dat <- read_csv("data-raw/vius_2021_puf.csv")
View(dat)
pacman::p_load(tidyverse, patchwork)
dat <- dat %>% mutate(across(where(is.character), as.factor))
# Identify column types
num_cols <- dat %>% select(where(is.numeric)) %>% names()
cat_cols <- dat %>% select(where(is.factor)) %>% names()
# Plot numeric distributions
num_plots <- map(num_cols, ~ ggplot(dat, aes(x = .data[[.x]])) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = paste("Distribution of", .x)) +
theme_minimal())
# Plot categorical distributions
cat_plots <- map(cat_cols, ~ ggplot(dat, aes(x = .data[[.x]])) +
geom_bar(fill = "orange", alpha = 0.7) +
labs(title = paste("Count of", .x)) +
theme_minimal())
# Display all plots
wrap_plots(c(num_plots, cat_plots), ncol = 2)
# Identify column types
num_cols <- dat %>% select(where(is.numeric)) %>% names()
cat_cols <- dat %>% select(where(is.factor)) %>% names()
# Plot numeric distributions
num_plots <- map(num_cols, ~ ggplot(dat, aes(x = .data[[.x]])) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = paste("Distribution of", .x)) +
theme_minimal())
# Plot categorical distributions
cat_plots <- map(cat_cols, ~ ggplot(dat, aes(x = .data[[.x]])) +
geom_bar(fill = "orange", alpha = 0.7) +
labs(title = paste("Count of", .x)) +
theme_minimal())
# Combine all plots
all_plots <- c(num_plots, cat_plots)
# Function to display 10 plots at a time
show_plots <- function(page_num = 1, page_size = 10) {
start <- (page_num - 1) * page_size + 1
end <- min(start + page_size - 1, length(all_plots))
if (start > length(all_plots)) {
message("No more plots to display.")
return(NULL)
}
wrap_plots(all_plots[start:end], ncol = 2)
}
# Example: Show the first 10 plots
show_plots(page_num = 1)
# Example: Show the first 10 plots
show_plots(page_num = 2)
# Example: Show the first 10 plots
show_plots(page_num = 3)
# Example: Show the first 10 plots
show_plots(page_num = 4)
# Example: Show the first 10 plots
show_plots(page_num = 5)
# Example: Show the first 10 plots
show_plots(page_num = 6)
# Example: Show the first 10 plots
show_plots(page_num = 7)
# Example: Show the first 10 plots
show_plots(page_num = 7)
# Example: Show the first 10 plots
show_plots(page_num = 8)
vius <- read_csv("data-raw/vius_2021_puf.csv")
pacman::p_load(tidyverse, patchwork, purrr, sf)
vius <- read_csv("data-raw/vius_2021_puf.csv")
# Define numeric mapping for codes 1 to 7
code_to_value <- c(
"1" = 50,
"2" = mean(c(100, 499)),
"3" = mean(c(500, 999)),
"4" = mean(c(1000, 1999)),
"5" = mean(c(2000, 4999)),
"6" = mean(c(5000, 9999)),
"7" = 10000
)
# Filter out rows where GM_COST is "8" or "X"
vius_clean <- subset(vius, GM_COST %in% names(code_to_value))
# Apply the mapping
vius_clean$GM_COST_NUM <- code_to_value[vius_clean$GM_COST]
plot(vius_clean$GM_COST)
plot(vius_clean$GM_COST, vius_clean$JU_HOMEBASE)
plot(vius_clean$JU_HOMEBASE, vius_clean$GM_COST)
# Define numeric mapping for codes 1 to 7
code_to_value <- c(
"1" = 50,
"2" = mean(c(100, 499)),
"3" = mean(c(500, 999)),
"4" = mean(c(1000, 1999)),
"5" = mean(c(2000, 4999)),
"6" = mean(c(5000, 9999)),
"7" = 10000
)
# Filter out rows where GM_COST is "8" or "X"
vius_clean <- subset(vius, GM_COST %in% names(code_to_value))
# Apply the mapping
vius_clean$GM_COST_NUM <- code_to_value[vius_clean$GM_COST]
plot(vius_clean$JU_HOMEBASE, vius_clean$GM_COST)
vius <- read_csv("data-raw/vius_2021_puf.csv")
# Define numeric mapping for codes 1 to 7
code_to_value <- c(
"1" = 50,
"2" = mean(c(100, 499)),
"3" = mean(c(500, 999)),
"4" = mean(c(1000, 1999)),
"5" = mean(c(2000, 4999)),
"6" = mean(c(5000, 9999)),
"7" = 10000
)
# Filter out rows where GM_COST is "8" or "X"
vius_clean <- subset(vius, GM_COST %in% names(code_to_value))
# Apply the mapping
vius_clean$GM_COST_NUM <- code_to_value[vius_clean$GM_COST]
plot(vius_clean$JU_HOMEBASE, vius_clean$GM_COST)
library(tidyverse)
library(plotly)
vius <- read_csv("~/Downloads/vius_2021_puf.csv")
vius$MODELYEAR <- str_replace_all(vius$MODELYEAR, "P", "") |>
as.numeric()
vius$MODELYEAR <- (vius$MODELYEAR + 1) %% 100
mean(vius$MODELYEAR) - 1
vius <- vius |>
filter(AVGWEIGHT != "X") |>
mutate(AVGWEIGHT = as.numeric(AVGWEIGHT)) |>
mutate(AVGWEIGHT = case_when(
AVGWEIGHT == 1 ~ 3000,
AVGWEIGHT == 2 ~ 7250,
AVGWEIGHT == 3 ~ 9250,
AVGWEIGHT == 4 ~ 12000,
AVGWEIGHT == 5 ~ 15000,
AVGWEIGHT == 6 ~ 17750,
AVGWEIGHT == 7 ~ 22750,
AVGWEIGHT == 8 ~ 29500,
AVGWEIGHT == 9 ~ 36500,
AVGWEIGHT == 10 ~ 45000,
AVGWEIGHT == 11 ~ 55000,
AVGWEIGHT == 12 ~ 70000,
AVGWEIGHT == 13 ~ 90000,
AVGWEIGHT == 14 ~ 115000,
TRUE ~ 130000
))
vius <- vius |>
filter(GM_COST != 'X' & GM_COST != '8') |>
mutate(GM_COST = as.numeric(GM_COST)) |>
mutate(GM_COST = case_when(
GM_COST == 1 ~ 50,
GM_COST == 2 ~ 250,
GM_COST == 3 ~ 750,
GM_COST == 4 ~ 1500,
GM_COST == 5 ~ 3000,
GM_COST == 6 ~ 7500,
TRUE ~ 10000
))
vius <- vius |>
filter(ER_COST != '7') |>
mutate(ER_COST = case_when(
ER_COST == '1' ~ 750,
ER_COST == '2' ~ 1500,
ER_COST == '3' ~ 3000,
ER_COST == '4' ~ 7500,
ER_COST == '5' ~ 15000,
ER_COST == '6' ~ 20000,
TRUE ~ 0
))
miles <- vius |>
select(TABWEIGHT, REGSTATE, MILESANNL) |>
group_by(REGSTATE) |>
mutate(totalMiles = sum(TABWEIGHT * MILESANNL))
dollars <- vius |>
select(TABWEIGHT, REGSTATE, GM_COST) |>
group_by(REGSTATE) |>
mutate(dollarsSpent = sum(TABWEIGHT * GM_COST) / sum(TABWEIGHT)) |>
mutate(dollarsSpent = round(dollarsSpent, 2))
extensive <- vius |>
select(TABWEIGHT, REGSTATE, ER_COST) |>
filter(ER_COST > 0) |>
group_by(REGSTATE) |>
mutate(dollarsSpent = sum(TABWEIGHT * ER_COST) / sum(TABWEIGHT)) |>
mutate(dollarsSpent = round(dollarsSpent, 2), count = round(TABWEIGHT, 0))
g1 <- list(scope = 'usa', projection = list(type = 'albers usa'), showlakes = TRUE, lakecolor = toRGB("white"))
miles$hover <- with(miles, paste("State: ", miles$REGSTATE, "<br>", "Miles: ",
miles$totalMiles))
dollars$hover <- with(dollars, paste("State: ", dollars$REGSTATE, "<br>",
"Average repair costs: $",
dollars$dollarsSpent, sep = ""))
extensive$hover <- with(extensive, paste("State: ", extensive$REGSTATE, "<br>",
"Vehicles requiring extensive repairs: ",
extensive$count, "<br>",
"Average repair costs: $",
extensive$dollarsSpent, sep = ""))
averageRepairs <- plot_geo(dollars, locationmode = "USA-states") |>
add_trace(z = ~dollarsSpent, text = ~hover, locations = ~REGSTATE,
color = ~dollarsSpent, colors = 'Blues',
hoverinfo = "text") |>
layout(geo = g1)
averageRepairs
extensiveRepairs <- plot_geo(extensive, locationmode = "USA-states") |>
add_trace(z = ~dollarsSpent, text = ~hover, locations = ~REGSTATE,
color = ~dollarsSpent, colors = 'Blues',
hoverinfo = "text") |>
layout(geo = g1)
extensiveRepairs
library(dplyr)
library(ggplot2)
# Load dataset
dataset <- read.csv("../data-raw/vius_2021_puf.csv")
# Load only necessary columns
custom_data <- dataset %>%
select(TABWEIGHT, PRIMPROD, REGSTATE)
dataset <- read_csv("data-raw/vius_2021_puf.csv")
# Define PRIMPROD labels (from data dictionary)
primprod_labels <- c(
"01" = "Animals and fish, live",
"02" = "Animal feed and animal products",
"03" = "Grains, cereal",
"04" = "Other agricultural products",
"05" = "Basic chemicals",
"06" = "Fertilizers",
"07" = "Pharmaceuticals",
"08" = "Other chemical products",
"09" = "Alcoholic beverages",
"10" = "Bakery/grain products",
"11" = "Meat and seafood",
"12" = "Tobacco products",
"13" = "Other prepared foodstuffs",
"14" = "Logs and raw wood",
"15" = "Paper articles",
"16" = "Printed products",
"17" = "Pulp and paper",
"18" = "Wood products",
"19" = "Articles of base metal",
"20" = "Base metal forms",
"21" = "Nonmetallic mineral products",
"22" = "Electronics and electrical",
"23" = "Furniture and lamps",
"24" = "Machinery",
"25" = "Miscellaneous manufactured",
"26" = "Precision instruments",
"27" = "Textiles and leather",
"28" = "Vehicles and parts",
"29" = "Other transportation equipment",
"30" = "Coal",
"31" = "Crude petroleum",
"32" = "Gravel or stone",
"33" = "Metallic ores",
"34" = "Building stone",
"35" = "Natural sands",
"36" = "Other nonmetallic minerals",
"37" = "Fuel oils",
"38" = "Gasoline and blends",
"39" = "Aviation fuel and kerosene",
"40" = "Ethanol blends",
"41" = "Plastics and rubber",
"42" = "Other petroleum products",
"43" = "Hazardous waste",
"44" = "Other waste and scrap",
"45" = "Recyclable products",
"46" = "Mail and parcels",
"47" = "Empty containers",
"48" = "Mixed freight"
)
custom_data_clean <- custom_data %>%
filter(
!is.na(PRIMPROD),
!is.na(REGSTATE),
!is.na(TABWEIGHT),
PRIMPROD != "X",
PRIMPROD != "98",  # Remove 'Other unlisted products'
PRIMPROD != "99",  # Remove 'Not reported'
PRIMPROD != "49"   # NEW: Remove unknown or undefined PRIMPROD code
) %>%
mutate(
PRIMPROD = as.numeric(PRIMPROD),
PRIMPROD_LABEL = factor(
primprod_labels[as.character(PRIMPROD)],
levels = unique(primprod_labels)
)
)
# Load only necessary columns
custom_data <- dataset %>%
select(TABWEIGHT, PRIMPROD, REGSTATE)
# Define PRIMPROD labels (from data dictionary)
primprod_labels <- c(
"01" = "Animals and fish, live",
"02" = "Animal feed and animal products",
"03" = "Grains, cereal",
"04" = "Other agricultural products",
"05" = "Basic chemicals",
"06" = "Fertilizers",
"07" = "Pharmaceuticals",
"08" = "Other chemical products",
"09" = "Alcoholic beverages",
"10" = "Bakery/grain products",
"11" = "Meat and seafood",
"12" = "Tobacco products",
"13" = "Other prepared foodstuffs",
"14" = "Logs and raw wood",
"15" = "Paper articles",
"16" = "Printed products",
"17" = "Pulp and paper",
"18" = "Wood products",
"19" = "Articles of base metal",
"20" = "Base metal forms",
"21" = "Nonmetallic mineral products",
"22" = "Electronics and electrical",
"23" = "Furniture and lamps",
"24" = "Machinery",
"25" = "Miscellaneous manufactured",
"26" = "Precision instruments",
"27" = "Textiles and leather",
"28" = "Vehicles and parts",
"29" = "Other transportation equipment",
"30" = "Coal",
"31" = "Crude petroleum",
"32" = "Gravel or stone",
"33" = "Metallic ores",
"34" = "Building stone",
"35" = "Natural sands",
"36" = "Other nonmetallic minerals",
"37" = "Fuel oils",
"38" = "Gasoline and blends",
"39" = "Aviation fuel and kerosene",
"40" = "Ethanol blends",
"41" = "Plastics and rubber",
"42" = "Other petroleum products",
"43" = "Hazardous waste",
"44" = "Other waste and scrap",
"45" = "Recyclable products",
"46" = "Mail and parcels",
"47" = "Empty containers",
"48" = "Mixed freight"
)
custom_data_clean <- custom_data %>%
filter(
!is.na(PRIMPROD),
!is.na(REGSTATE),
!is.na(TABWEIGHT),
PRIMPROD != "X",
PRIMPROD != "98",  # Remove 'Other unlisted products'
PRIMPROD != "99",  # Remove 'Not reported'
PRIMPROD != "49"   # NEW: Remove unknown or undefined PRIMPROD code
) %>%
mutate(
PRIMPROD = as.numeric(PRIMPROD),
PRIMPROD_LABEL = factor(
primprod_labels[as.character(PRIMPROD)],
levels = unique(primprod_labels)
)
)
# Summarize: weighted vehicle counts by state and product
primprod_counts <- custom_data_clean %>%
group_by(REGSTATE, PRIMPROD_LABEL) %>%
summarise(estimated_vehicles = sum(TABWEIGHT, na.rm = TRUE), .groups = "drop")
# Set state to California
states <- sort(unique(custom_data_clean$REGSTATE))
for (state in states) {
state_data <- custom_data_clean %>%
filter(REGSTATE == state, !is.na(PRIMPROD_LABEL))
# Summarize by product label (not raw data rows)
summary_data <- state_data %>%
group_by(PRIMPROD_LABEL) %>%
summarise(estimated_vehicles = sum(TABWEIGHT), .groups = "drop") %>%
arrange(desc(estimated_vehicles))
p <- ggplot(summary_data, aes(x = reorder(PRIMPROD_LABEL, estimated_vehicles), y = estimated_vehicles, fill = PRIMPROD_LABEL)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = paste("Estimated Vehicles by Primary Product -", state),
x = "Primary Product",
y = "Estimated Vehicles",
fill = "Primary Product"
) +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(color = "white"),
axis.title = element_text(color = "white"),
axis.text = element_text(color = "white"),
legend.position = "none",  # Optional: hide legend if labels are clear
panel.grid.major = element_line(color = "gray30"),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black")
)
print(p)
Sys.sleep(2)
}
library(dplyr)
library(ggplot2)
# Load only necessary columns
custom_data <- dataset %>%
select(TABWEIGHT, PRIMCOMMACT, REGSTATE)
# Define PRIMCOMMACT labels (from VIUS data dictionary)
primcommact_labels <- c(
"01" = "For-hire transportation",
"02" = "Private transportation support",
"03" = "Construction",
"04" = "Agriculture",
"05" = "Forestry",
"06" = "Fishing",
"07" = "Mining",
"08" = "Utilities",
"09" = "Manufacturing",
"10" = "Retail trade",
"11" = "Wholesale trade",
"12" = "Services",
"13" = "Government",
"14" = "Household",
"15" = "Not reported"
)
# Clean and prepare data
custom_data_clean <- custom_data %>%
filter(
!is.na(PRIMCOMMACT),
!is.na(REGSTATE),
!is.na(TABWEIGHT),
PRIMCOMMACT != "X",
PRIMCOMMACT %in% names(primcommact_labels)
) %>%
mutate(
PRIMCOMMACT = as.numeric(PRIMCOMMACT),
PRIMCOMMACT_LABEL = factor(
primcommact_labels[as.character(PRIMCOMMACT)],
levels = primcommact_labels
)
)
# Summarize: weighted vehicle counts by state and PRIMCOMMACT
primcommact_counts <- custom_data_clean %>%
group_by(REGSTATE, PRIMCOMMACT_LABEL) %>%
summarise(estimated_vehicles = sum(TABWEIGHT, na.rm = TRUE), .groups = "drop")
# Get list of all states
states <- sort(unique(custom_data_clean$REGSTATE))
# Loop through each state and plot
for (state in states) {
state_data <- custom_data_clean %>%
filter(REGSTATE == state, !is.na(PRIMCOMMACT_LABEL))
summary_data <- state_data %>%
group_by(PRIMCOMMACT_LABEL) %>%
summarise(estimated_vehicles = sum(TABWEIGHT), .groups = "drop") %>%
arrange(desc(estimated_vehicles))
p <- ggplot(summary_data, aes(x = reorder(PRIMCOMMACT_LABEL, estimated_vehicles), y = estimated_vehicles, fill = PRIMCOMMACT_LABEL)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = paste("Estimated Vehicles by Primary Commodity Activity -", state),
x = "Primary Commodity Activity",
y = "Estimated Vehicles",
fill = "Commodity Activity"
) +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(color = "white"),
axis.title = element_text(color = "white"),
axis.text = element_text(color = "white"),
legend.position = "none",
panel.grid.major = element_line(color = "gray30"),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black")
)
print(p)
}
