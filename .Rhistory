mutate(dollarsSpent = round(dollarsSpent, 2), count = round(TABWEIGHT, 0))
extensiveBtype <- vius |>
select(TABWEIGHT, BTYPE, ER_COST) |>
filter(BTYPE != 'X') |>
group_by(BTYPE) |>
mutate(dollarsSpent = sum(TABWEIGHT * ER_COST) / sum(TABWEIGHT)) |>
mutate(dollarsSpent = round(dollarsSpent, 2))
g1 <- list(scope = 'usa', projection = list(type = 'albers usa'),
showlakes = TRUE, lakecolor = toRGB("white"))
select(TABWEIGHT, REGSTATE, GM_COST) |>
group_by(REGSTATE) |>
mutate(dollarsSpent = sum(TABWEIGHT * GM_COST) / sum(TABWEIGHT)) |>
mutate(dollarsSpent = round(dollarsSpent, 2))
dollarsBtype <- vius |>
select(TABWEIGHT, BTYPE, GM_COST) |>
group_by(BTYPE) |>
mutate(dollarsSpent = sum(TABWEIGHT * GM_COST) / sum(TABWEIGHT)) |>
mutate(dollarsSpent = round(dollarsSpent, 2))
extensive <- vius |>
select(TABWEIGHT, REGSTATE, ER_COST) |>
filter(ER_COST > 0) |>
group_by(REGSTATE) |>
mutate(dollarsSpent = sum(TABWEIGHT * ER_COST) / sum(TABWEIGHT)) |>
mutate(dollarsSpent = round(dollarsSpent, 2), count = round(TABWEIGHT, 0))
extensiveBtype <- vius |>
select(TABWEIGHT, BTYPE, ER_COST) |>
group_by(BTYPE) |>
mutate(dollarsSpent = sum(TABWEIGHT * ER_COST) / sum(TABWEIGHT)) |>
mutate(dollarsSpent = round(dollarsSpent, 2))
g1 <- list(scope = 'usa', projection = list(type = 'albers usa'), showlakes = TRUE, lakecolor = toRGB("white"))
miles$hover <- with(miles, paste("State: ", miles$REGSTATE, "<br>", "Miles: ",
miles$totalMiles))
dollars$hover <- with(dollars, paste("State: ", dollars$REGSTATE, "<br>",
"Average repair costs: $",
dollars$dollarsSpent, sep = ""))
extensive$hover <- with(extensive,
paste("State: ", extensive$REGSTATE, "<br>",
extensive$hover <- with(extensive, paste("State: ", extensive$REGSTATE, "<br>",
"Vehicles requiring extensive repairs: ",
extensive$count, "<br>",
"Average repair costs: $",
extensive$dollarsSpent, sep = ""))
dollars$hover <- with(dollars, paste("State: ", dollars$REGSTATE, "<br>",
"Average repair costs: $",
dollars$dollarsSpent, sep = ""))
extensive$hover <- with(extensive,
paste("State: ", extensive$REGSTATE, "<br>",
averageRepairsMap <- plot_geo(dollars, locationmode = "USA-states") |>
add_trace(z = ~dollarsSpent, text = ~hover, locations = ~REGSTATE,
color = ~dollarsSpent, colors = 'Blues',
hoverinfo = "text") |>
layout(geo = g1)
extensiveRepairsMap <- plot_geo(extensive, locationmode = "USA-states") |>
add_trace(z = ~dollarsSpent, text = ~hover, locations = ~REGSTATE,
color = ~dollarsSpent, colors = 'Blues',
hoverinfo = "text") |>
layout(geo = g1)
averageRepairsBar <- plot_ly(dollarsBtype, x = ~BTYPE, y = ~dollarsSpent,
type = "bar", color = I("blue"))
averageRepairsBar
dollarsBtype <- vius |>
select(TABWEIGHT, BTYPE, GM_COST) |>
filter(BTYPE != 'X') |>
group_by(BTYPE) |>
mutate(dollarsSpent = sum(TABWEIGHT * GM_COST) / sum(TABWEIGHT)) |>
mutate(dollarsSpent = round(dollarsSpent, 2))
extensive <- vius |>
select(TABWEIGHT, REGSTATE, ER_COST) |>
filter(ER_COST > 0) |>
group_by(REGSTATE) |>
mutate(dollarsSpent = sum(TABWEIGHT * ER_COST) / sum(TABWEIGHT)) |>
mutate(dollarsSpent = round(dollarsSpent, 2), count = round(TABWEIGHT, 0))
extensiveBtype <- vius |>
select(TABWEIGHT, BTYPE, ER_COST) |>
filter(BTYPE != 'X')
averageRepairsBar <- plot_ly(dollarsBtype, x = ~BTYPE, y = ~dollarsSpent,
type = "bar", color = I("blue"))
averageRepairsBar
?plot_ly
averageRepairsBar <- plot_ly(dollarsBtype, x = ~BTYPE, y = ~dollarsSpent,
type = "box", color = I("blue"))
averageRepairsBar
averageRepairsBar <- plot_ly(dollarsBtype, x = ~BTYPE, y = ~dollarsSpent,
type = "bar", color = I("blue"))
averageRepairsBar
?add_trace
averageRepairsBar <- plot_ly(dollarsBtype, color = "blue") |>
add_bars(x = ~BTYPE, y = ~dollarsSpent)
averageRepairsBar
averageRepairsBar <- plot_ly(dollarsBtype, color = I("blue")) |>
add_bars(x = ~BTYPE, y = ~dollarsSpent)
averageRepairsBar
View(extensiveBtype)
View(dollarsBtype)
dollarsBtype <- vius |>
select(TABWEIGHT, BTYPE, GM_COST) |>
filter(BTYPE != 'X') |>
group_by(BTYPE) |>
mutate(dollarsSpent = sum(TABWEIGHT * GM_COST) / sum(TABWEIGHT)) |>
mutate(dollarsSpent = round(dollarsSpent, 2), count = round(TABWEIGHT, 0)) |>
mutate(dollarsSpent = dollarsSpent / count)
averageRepairsBar <- plot_ly(dollarsBtype, color = I("blue")) |>
add_bars(x = ~BTYPE, y = ~dollarsSpent)
averageRepairsBar
dollarsBtype <- vius |>
select(TABWEIGHT, BTYPE, GM_COST) |>
filter(BTYPE != 'X') |>
group_by(BTYPE) |>
mutate(dollarsSpent = sum(TABWEIGHT * GM_COST) / sum(TABWEIGHT)) |>
mutate(dollarsSpent = round(dollarsSpent, 2))
extensive <- vius |>
select(TABWEIGHT, REGSTATE, ER_COST) |>
filter(ER_COST > 0) |>
group_by(REGSTATE) |>
mutate(dollarsSpent = sum(TABWEIGHT * ER_COST) / sum(TABWEIGHT)) |>
mutate(dollarsSpent = round(dollarsSpent, 2), count = round(TABWEIGHT, 0))
extensiveBtype <- vius |>
select(TABWEIGHT, BTYPE, ER_COST) |>
filter(BTYPE != 'X')
group_by(BTYPE) |>
mutate(dollarsSpent = sum(TABWEIGHT * ER_COST) / sum(TABWEIGHT)) |>
mutate(dollarsSpent = round(dollarsSpent, 2))
g1 <- list(scope = 'usa', projection = list(type = 'albers usa'), showlakes = TRUE, lakecolor = toRGB("white"))
miles$hover <- with(miles, paste("State: ", miles$REGSTATE, "<br>", "Miles: ",
miles$totalMiles))
dollars$hover <- with(dollars, paste("State: ", dollars$REGSTATE, "<br>",
"Average repair costs: $",
dollars$dollarsSpent, sep = ""))
extensive$hover <- with(extensive, paste("State: ", extensive$REGSTATE, "<br>",
"Vehicles requiring extensive repairs: ",
extensive$count, "<br>",
"Average repair costs: $",
extensive$dollarsSpent, sep = ""))
averageRepairsMap <- plot_geo(dollars, locationmode = "USA-states") |>
add_trace(z = ~dollarsSpent, text = ~hover, locations = ~REGSTATE,
color = ~dollarsSpent, colors = 'Blues',
hoverinfo = "text") |>
layout(geo = g1)
averageRepairsMap
extensiveRepairsMap <- plot_geo(extensive, locationmode = "USA-states") |>
add_trace(z = ~dollarsSpent, text = ~hover, locations = ~REGSTATE,
color = ~dollarsSpent, colors = 'Blues',
hoverinfo = "text") |>
layout(geo = g1)
extensiveRepairsMap
averageRepairsBar <- plot_ly(dollarsBtype, color = I("blue")) |>
add_bars(x = ~BTYPE, y = ~dollarsSpent)
averageRepairsBar
library(devtools)
devtools::load_all(".")
getStateMaps("ER_COST", "This is a label")
devtools::load_all(".")
getStateMaps("ER_COST", "This is a label")
devtools::load_all(".")
getStateMaps("ER_COST", "This is a label")
devtools::load_all(".")
getStateMaps("ER_COST", "This is a label")
devtools::load_all(".")
vius <- readr::read_csv("data-raw/vius_2021_puf.csv")
drop_bad_values(vius)
library(tidyverse)
drop_bad_values(vius)
charToNum(vius)
names(vius)
vius <- drop_bad_values(vius)
vius <- charToNum(vius)
vius <- names(vius)
getStateMaps(vius, ER_COST, "This is a label")
View(vius)
devtools::load_all(".")
getStateMaps(vius, ER_COST, "This is a label")
devtools::load_all(".")
library(devtools)
getStateMaps <- function(vius, var, var_label = "Value") {
# Set geographic projection data
geo1 <- list(scope = 'usa', projection = list(type = 'albers usa'),
showlakes = TRUE, lakecolor = plotly::toRGB("white"))
custom_data <- vius |>
dplyr::select(TABWEIGHT, REGSTATE, {{ var }}) |>
dplyr::group_by(REGSTATE) |>
dplyr::mutate(total = sum(TABWEIGHT * {{ var }}) / sum(TABWEIGHT)) |>
dplyr::mutate(total = round(total, 2))
# Create the template for the map's hover box
custom_data$hover <- with(custom_data, paste("State: ", custom_data$REGSTATE),
"<br>", var_label, ": ", custom_data$var, sep = "")
# Create the map of the country with the specified variable
state_map <- plotly::plot_geo(custom_data, locationmode = "USA-states") |>
plotly::add_trace(z = ~{{ var }}, text = ~hover, locations = ~REGSTATE,
color = ~{{ var }}, colors = 'Blues', hoverinfo = "text") |>
plotly::layout(geo = geo1)
state_map
check()
library(devtools)
use_github_actions()
use_github_action()
use_github_action()
mtcars
x <- mpg
x <- as.name("mpg")
mtcars$x
x
mtcars$mpg
mtcars$x
mtcars$(!!x)
vars <- "mpg"
select(mtcars, {{ vars }})
library(tidyverse)
select(mtcars, {{ vars }})
select(mtcars, {{ vars }})
check()
document()
document()
rlang::last_trace()
names <- function(df){
names <- function(df){
# Define PRIMPROD labels (from data dictionary)
primprod_labels <- c(
"01" = "Animals and fish, live",
"02" = "Animal feed and animal products",
"03" = "Grains, cereal",
"04" = "Other agricultural products",
"05" = "Basic chemicals",
"06" = "Fertilizers",
"07" = "Pharmaceuticals",
"08" = "Other chemical products",
"09" = "Alcoholic beverages",
"10" = "Bakery/grain products",
"11" = "Meat and seafood",
"12" = "Tobacco products",
"13" = "Other prepared foodstuffs",
"14" = "Logs and raw wood",
"15" = "Paper articles",
"16" = "Printed products",
"17" = "Pulp and paper",
"18" = "Wood products",
"19" = "Articles of base metal",
"20" = "Base metal forms",
"21" = "Nonmetallic mineral products",
"22" = "Electronics and electrical",
"23" = "Furniture and lamps",
"24" = "Machinery",
"25" = "Miscellaneous manufactured",
"26" = "Precision instruments",
"27" = "Textiles and leather",
"28" = "Vehicles and parts",
"29" = "Other transportation equipment",
"30" = "Coal",
"31" = "Crude petroleum",
"32" = "Gravel or stone",
"33" = "Metallic ores",
"34" = "Building stone",
"35" = "Natural sands",
"36" = "Other nonmetallic minerals",
"37" = "Fuel oils",
"38" = "Gasoline and blends",
"39" = "Aviation fuel and kerosene",
"40" = "Ethanol blends",
"41" = "Plastics and rubber",
"42" = "Other petroleum products",
"43" = "Hazardous waste",
"44" = "Other waste and scrap",
"45" = "Recyclable products",
"46" = "Mail and parcels",
"47" = "Empty containers",
"48" = "Mixed freight"
)
if (any(df$PRIMPROD == "X")){
stop("Must remove useless values first(run drop_bad_values)")
}
df <- dplyr::mutate(df,
PRIMPROD = factor(
primprod_labels[as.character(df$PRIMPROD)],
levels = primprod_labels
)
names <- function(df){
names <- function(df){
# Define PRIMPROD labels (from data dictionary)
primprod_labels <- c(
"01" = "Animals and fish, live",
"02" = "Animal feed and animal products",
"03" = "Grains, cereal",
"04" = "Other agricultural products",
"05" = "Basic chemicals",
"06" = "Fertilizers",
"07" = "Pharmaceuticals",
"08" = "Other chemical products",
"09" = "Alcoholic beverages",
"10" = "Bakery/grain products",
"11" = "Meat and seafood",
"12" = "Tobacco products",
"13" = "Other prepared foodstuffs",
"14" = "Logs and raw wood",
"15" = "Paper articles",
"16" = "Printed products",
"17" = "Pulp and paper",
"18" = "Wood products",
"19" = "Articles of base metal",
"20" = "Base metal forms",
"21" = "Nonmetallic mineral products",
"22" = "Electronics and electrical",
"23" = "Furniture and lamps",
"24" = "Machinery",
"25" = "Miscellaneous manufactured",
"26" = "Precision instruments",
"27" = "Textiles and leather",
"28" = "Vehicles and parts",
"29" = "Other transportation equipment",
"30" = "Coal",
"31" = "Crude petroleum",
"32" = "Gravel or stone",
"33" = "Metallic ores",
"34" = "Building stone",
"35" = "Natural sands",
"36" = "Other nonmetallic minerals",
"37" = "Fuel oils",
"38" = "Gasoline and blends",
"39" = "Aviation fuel and kerosene",
"40" = "Ethanol blends",
"41" = "Plastics and rubber",
"42" = "Other petroleum products",
"43" = "Hazardous waste",
"44" = "Other waste and scrap",
"45" = "Recyclable products",
"46" = "Mail and parcels",
"47" = "Empty containers",
"48" = "Mixed freight"
)
if (any(df$PRIMPROD == "X")){
stop("Must remove useless values first(run drop_bad_values)")
}
df <- dplyr::mutate(df,
PRIMPROD = factor(
primprod_labels[as.character(df$PRIMPROD)],
levels = primprod_labels
)
)
df <- df |>
filter(BTYPE != "X") |>
mutate(BTYPE = case_when(
BTYPE == "01" ~ "Pickup",
BTYPE == "02" ~ "Minvan",
BTYPE == "03" ~ "Other light van",
BTYPE == "04" ~ "Sport utility vehicle",
BTYPE == "05" ~ "Armored",
BTYPE == "06" ~ "Beverage or bay",
BTYPE == "07" ~ "Box truck",
BTYPE == "08" ~ "Concrete mixer",
BTYPE == "09" ~ "Concrete pumper",
BTYPE == "10" ~ "Conveyor bed",
BTYPE == "11" ~ "Crane",
BTYPE == "12" ~ "Dump",
BTYPE == "13" ~ "Flatbed, stake, or platform",
BTYPE == "14" ~ "Hooklift/roll-off",
BTYPE == "15" ~ "Logging",
BTYPE == "16" ~ "Service, utility",
BTYPE == "17" ~ "Service, other",
BTYPE == "18" ~ "Street sweeper",
BTYPE == "19" ~ "Tank, liquid or gases",
BTYPE == "20" ~ "Tow/wrecker",
BTYPE == "21" ~ "Trash, garbage, or recycling",
BTYPE == "22" ~ "Vacuum",
BTYPE == "23" ~ "Van, walk-in",
BTYPE == "24" ~ "Van, other",
BTYPE == "25" ~ "Wood chipper",
BTYPE == "26" ~ "Other",
BTYPE == "27" ~ "Not reported",
TRUE ~ NA_character_
))
return(df)
>>>>>>> e8fb5c84fa945a53d91c7b7170c79d0d9aeadefa
}
vius <- read_csv("../vius_2021_puf_csv.csv")
vius <- read_csv("../vius_2021_puf_csv/vius_2021_puf_csv.csv")
getwd()
vius <- read_csv("../vius_2021_puf_csv/vius_2021_puf.csv")
names(vius)
drop_bad_values <- function(df){
df <- df |>
dplyr::filter(
!is.na(PRIMPROD),
!is.na(REGSTATE),
!is.na(TABWEIGHT),
PRIMPROD != "X",
PRIMPROD != "50",
PRIMPROD != "49"   # NEW: Remove unknown or undefined PRIMPROD code
)
}
x <- drop_bad_values(vius)
names(x)
document()
rlang::last_trace()
document()
rlang::last_trace()
document()
document()
rlang::last_trace()
library(devtools)
install_github("jashonnew/VIUSr")
library(VIUSr)
styler:::style_active_pkg()
lintr:::addin_lint_package()
lintr:::addin_lint_package()
styler:::style_active_pkg()
lintr:::addin_lint_package()
library(lintr)
install.packages("ggplot2")
install.packages("lintr")
install.packages("styler")
styler:::style_active_pkg()
lintr:::addin_lint_package()
lintr:::addin_lint_package()
lintr:::addin_lint_package()
lintr:::addin_lint_package()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint_package()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint_package()
document()
library(devtools)
document()
rlang::last_trace()
document()
document()
check()
document()
check()
install.packages("rlang")
library(rlang)
document()
library(devtools)
document()
check()
usethis::use_package("rlang")
check()
document()
check()
check()
document()
check()
lintr:::addin_lint_package()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint_package()
lintr:::addin_lint()
vius <- dplyr::mutate(vius,PRIMPROD = factor(primprod_labels[as.character(vius$PRIMPROD)], levels = primprod_labels))
vius <- readr::read_csv("data-raw/vius_2021_puf.csv")
vius <- dplyr::mutate(vius,PRIMPROD = factor(primprod_labels[as.character(vius$PRIMPROD)], levels = primprod_labels))
vius <- vius |> select(ID, TABWEIGHT, REGSTATE, ACQUIREYEAR, AVGWEIGHT, BTYPE,
ER_COST, FUELTYPE, GM_COST, KINDOFBUS, MILESANNL,
MILESLIFE, MODELYEAR, MPG, PRIMCOMMACT, PRIMPROD,
TRIPOFFROAD)
library(tidyverse)
<<<<<<< HEAD
vius <- read_csv("data-raw/vius_2021_puf.csv")
vius <- charToNum(vius)
vius <- names(vius)
getStateMaps(vius, AVGWEIGHT)
getStateMaps(vius, GM_COST, dollars = TRUE)
devtools::load_all(".")
getStateMaps(vius, AVGWEIGHT)
getStateMaps(vius, GM_COST, dollars = TRUE)
getStateMaps(vius, ER_COST, dollars = TRUE)
getStateMaps(vius, MILESANNL)
getStateMaps(vius, MILESLIFE)
rlang::last_trace()
getStateMaps(vius, MPG)
getStateMaps(vius, TRIPOFFROAD)
vius <- read_csv("data-raw/vius_2021_puf.csv")
library(tidyverse, devtools)
vius <- read_csv("data-raw/vius_2021_puf.csv")
devtools::load_all(".")
devtools::load_all(".")
vius <- charToNum(vius)
vius <- names(vius)
vius <- read_csv("data-raw/vius_2021_puf.csv")
vius <- charToNum(vius)
vius <- convert_names(vius)
getStateMaps(vius, MPG)
View(vius)
View(vius)
custom_data <- vius
View(custom_data)
custom_data <- vius|>
dplyr::select(TABWEIGHT, REGSTATE, {{ var }})
custom_data <- vius|>
dplyr::select(TABWEIGHT, REGSTATE, MPG)
View(custom_data)
class(vius$MPG)
check()
library(devtools)
check()
devtools::load_all(".")
check()
use_data_raw("vius_cleaning")
use_data_raw("vius")
library(devtools)
library(tidyverse)
vius <- vius |>
mutate(TRIPOFFROAD = as.numeric(TRIPOFFROAD))
vius <- readr::read_csv("data-raw/vius_2021_puf.csv")
=======
vius <- vius |> select(ID, TABWEIGHT, REGSTATE, ACQUIREYEAR, AVGWEIGHT, BTYPE,
ER_COST, FUELTYPE, GM_COST, KINDOFBUS, MILESANNL,
MILESLIFE, MODELYEAR, MPG, PRIMCOMMACT, PRIMPROD,
TRIPOFFROAD)
>>>>>>> e8fb5c84fa945a53d91c7b7170c79d0d9aeadefa
vius$MODELYEAR <- stringr::str_replace_all(vius$MODELYEAR, "P", "") |>
as.numeric()
vius <- vius |>
dplyr::mutate(AVGWEIGHT = as.numeric(AVGWEIGHT)) |>
dplyr::mutate(AVGWEIGHT = case_when(
AVGWEIGHT == 1 ~ 3000,
AVGWEIGHT == 2 ~ 7250,
AVGWEIGHT == 3 ~ 9250,
AVGWEIGHT == 4 ~ 12000,
AVGWEIGHT == 5 ~ 15000,
AVGWEIGHT == 6 ~ 17750,
AVGWEIGHT == 7 ~ 22750,
AVGWEIGHT == 8 ~ 29500,
AVGWEIGHT == 9 ~ 36500,
AVGWEIGHT == 10 ~ 45000,
AVGWEIGHT == 11 ~ 55000,
AVGWEIGHT == 12 ~ 70000,
AVGWEIGHT == 13 ~ 90000,
AVGWEIGHT == 14 ~ 115000,
TRUE ~ 130000
))
vius <- vius |>
dplyr::mutate(GM_COST = as.numeric(GM_COST)) |>
dplyr::mutate(GM_COST = case_when(
GM_COST == 1 ~ 50,
GM_COST == 2 ~ 250,
GM_COST == 3 ~ 750,
GM_COST == 4 ~ 1500,
GM_COST == 5 ~ 3000,
GM_COST == 6 ~ 7500,
TRUE ~ 10000
))
vius <- vius |>
dplyr::mutate(ER_COST = case_when(
ER_COST == "1" ~ 750,
ER_COST == "2" ~ 1500,
ER_COST == "3" ~ 3000,
ER_COST == "4" ~ 7500,
ER_COST == "5" ~ 15000,
ER_COST == "6" ~ 20000,
TRUE ~ 0
))
# Define PRIMPROD labels (from data dictionary)
primprod_labels <- c(
"01" = "Animals and fish, live",
"02" = "Animal feed and animal products",
"03" = "Grains, cereal",
"04" = "Other agricultural products",
"05" = "Basic chemicals",
"06" = "Fertilizers",
"07" = "Pharmaceuticals",
"08" = "Other chemical products",
"09" = "Alcoholic beverages",
"10" = "Bakery/grain products",
"11" = "Meat and seafood",
"12" = "Tobacco products",
"13" = "Other prepared foodstuffs",
"14" = "Logs and raw wood",
"15" = "Paper articles",
"16" = "Printed products",
"17" = "Pulp and paper",
"18" = "Wood products",
"19" = "Articles of base metal",
"20" = "Base metal forms",
"21" = "Nonmetallic mineral products",
"22" = "Electronics and electrical",
"23" = "Furniture and lamps",
"24" = "Machinery",
"25" = "Miscellaneous manufactured",
"26" = "Precision instruments",
"27" = "Textiles and leather",
"28" = "Vehicles and parts",
"29" = "Other transportation equipment",
"30" = "Coal",
"31" = "Crude petroleum",
"32" = "Gravel or stone",
"33" = "Metallic ores",
"34" = "Building stone",
"35" = "Natural sands",
"36" = "Other nonmetallic minerals",
"37" = "Fuel oils",
"38" = "Gasoline and blends",
"39" = "Aviation fuel and kerosene",
"40" = "Ethanol blends",
"41" = "Plastics and rubber",
"42" = "Other petroleum products",
"43" = "Hazardous waste",
"44" = "Other waste and scrap",
"45" = "Recyclable products",
"46" = "Mail and parcels",
"47" = "Empty containers",
"48" = "Mixed freight"
)
<<<<<<< HEAD
vius <- dplyr::mutate(vius,
PRIMPROD = factor(
primprod_labels[as.character(vius$PRIMPROD)],
levels = primprod_labels
)
)
vius <- vius |>
mutate(BTYPE = case_when(
BTYPE == "01" ~ "Pickup",
BTYPE == "02" ~ "Minvan",
BTYPE == "03" ~ "Other light van",
BTYPE == "04" ~ "Sport utility vehicle",
BTYPE == "05" ~ "Armored",
BTYPE == "06" ~ "Beverage or bay",
BTYPE == "07" ~ "Box truck",
BTYPE == "08" ~ "Concrete mixer",
BTYPE == "09" ~ "Concrete pumper",
BTYPE == "10" ~ "Conveyor bed",
BTYPE == "11" ~ "Crane",
BTYPE == "12" ~ "Dump",
BTYPE == "13" ~ "Flatbed, stake, or platform",
BTYPE == "14" ~ "Hooklift/roll-off",
BTYPE == "15" ~ "Logging",
BTYPE == "16" ~ "Service, utility",
BTYPE == "17" ~ "Service, other",
BTYPE == "18" ~ "Street sweeper",
BTYPE == "19" ~ "Tank, liquid or gases",
BTYPE == "20" ~ "Tow/wrecker",
BTYPE == "21" ~ "Trash, garbage, or recycling",
BTYPE == "22" ~ "Vacuum",
BTYPE == "23" ~ "Van, walk-in",
BTYPE == "24" ~ "Van, other",
BTYPE == "25" ~ "Wood chipper",
BTYPE == "26" ~ "Other",
BTYPE == "27" ~ "Not reported",
TRUE ~ NA_character_
))
vius <- vius |>
mutate(MPG = as.numeric(MPG))
vius <- vius |>
mutate(MILESANNL = as.numeric(MILESANNL))
vius <- vius |>
mutate(MILESLIFE = as.numeric(MILESLIFE))
vius <- vius |>
mutate(TRIPOFFROAD = as.numeric(TRIPOFFROAD))
usethis::use_data(vius, overwrite = TRUE)
devtools::load_all(".")
get_state_maps(vius, var = MILESLIFE)
check()
vius <- readr::read_csv("data-raw/vius_2021_puf.csv")
vius <- vius |>
select(ID, TABWEIGHT, REGSTATE, ACQUIREYEAR, AVGWEIGHT, BTYPE, ER_COST,
FUELTYPE, GM_COST, KINDOFBUS, MILESANNL, MILESLIFE, MODELYEAR, MPG,
PRIMCOMMACT, PRIMPROD, TRIPOFFROAD)
vius$MODELYEAR <- stringr::str_replace_all(vius$MODELYEAR, "P", "") |>
as.numeric()
vius <- vius |>
dplyr::mutate(AVGWEIGHT = as.numeric(AVGWEIGHT)) |>
dplyr::mutate(AVGWEIGHT = case_when(
AVGWEIGHT == 1 ~ 3000,
AVGWEIGHT == 2 ~ 7250,
AVGWEIGHT == 3 ~ 9250,
AVGWEIGHT == 4 ~ 12000,
AVGWEIGHT == 5 ~ 15000,
AVGWEIGHT == 6 ~ 17750,
AVGWEIGHT == 7 ~ 22750,
AVGWEIGHT == 8 ~ 29500,
AVGWEIGHT == 9 ~ 36500,
AVGWEIGHT == 10 ~ 45000,
AVGWEIGHT == 11 ~ 55000,
AVGWEIGHT == 12 ~ 70000,
AVGWEIGHT == 13 ~ 90000,
AVGWEIGHT == 14 ~ 115000,
TRUE ~ 130000
))
vius <- vius |>
dplyr::mutate(GM_COST = as.numeric(GM_COST)) |>
dplyr::mutate(GM_COST = case_when(
GM_COST == 1 ~ 50,
GM_COST == 2 ~ 250,
GM_COST == 3 ~ 750,
GM_COST == 4 ~ 1500,
GM_COST == 5 ~ 3000,
GM_COST == 6 ~ 7500,
TRUE ~ 10000
))
vius <- vius |>
dplyr::mutate(ER_COST = case_when(
ER_COST == "1" ~ 750,
ER_COST == "2" ~ 1500,
ER_COST == "3" ~ 3000,
ER_COST == "4" ~ 7500,
ER_COST == "5" ~ 15000,
ER_COST == "6" ~ 20000,
TRUE ~ 0
))
# Define PRIMPROD labels (from data dictionary)
primprod_labels <- c(
"01" = "Animals and fish, live",
"02" = "Animal feed and animal products",
"03" = "Grains, cereal",
"04" = "Other agricultural products",
"05" = "Basic chemicals",
"06" = "Fertilizers",
"07" = "Pharmaceuticals",
"08" = "Other chemical products",
"09" = "Alcoholic beverages",
"10" = "Bakery/grain products",
"11" = "Meat and seafood",
"12" = "Tobacco products",
"13" = "Other prepared foodstuffs",
"14" = "Logs and raw wood",
"15" = "Paper articles",
"16" = "Printed products",
"17" = "Pulp and paper",
"18" = "Wood products",
"19" = "Articles of base metal",
"20" = "Base metal forms",
"21" = "Nonmetallic mineral products",
"22" = "Electronics and electrical",
"23" = "Furniture and lamps",
"24" = "Machinery",
"25" = "Miscellaneous manufactured",
"26" = "Precision instruments",
"27" = "Textiles and leather",
"28" = "Vehicles and parts",
"29" = "Other transportation equipment",
"30" = "Coal",
"31" = "Crude petroleum",
"32" = "Gravel or stone",
"33" = "Metallic ores",
"34" = "Building stone",
"35" = "Natural sands",
"36" = "Other nonmetallic minerals",
"37" = "Fuel oils",
"38" = "Gasoline and blends",
"39" = "Aviation fuel and kerosene",
"40" = "Ethanol blends",
"41" = "Plastics and rubber",
"42" = "Other petroleum products",
"43" = "Hazardous waste",
"44" = "Other waste and scrap",
"45" = "Recyclable products",
"46" = "Mail and parcels",
"47" = "Empty containers",
"48" = "Mixed freight"
)
vius <- dplyr::mutate(vius,
PRIMPROD = factor(
primprod_labels[as.character(vius$PRIMPROD)],
levels = primprod_labels
)
)
vius <- vius |>
mutate(BTYPE = case_when(
BTYPE == "01" ~ "Pickup",
BTYPE == "02" ~ "Minvan",
BTYPE == "03" ~ "Other light van",
BTYPE == "04" ~ "Sport utility vehicle",
BTYPE == "05" ~ "Armored",
BTYPE == "06" ~ "Beverage or bay",
BTYPE == "07" ~ "Box truck",
BTYPE == "08" ~ "Concrete mixer",
BTYPE == "09" ~ "Concrete pumper",
BTYPE == "10" ~ "Conveyor bed",
BTYPE == "11" ~ "Crane",
BTYPE == "12" ~ "Dump",
BTYPE == "13" ~ "Flatbed, stake, or platform",
BTYPE == "14" ~ "Hooklift/roll-off",
BTYPE == "15" ~ "Logging",
BTYPE == "16" ~ "Service, utility",
BTYPE == "17" ~ "Service, other",
BTYPE == "18" ~ "Street sweeper",
BTYPE == "19" ~ "Tank, liquid or gases",
BTYPE == "20" ~ "Tow/wrecker",
BTYPE == "21" ~ "Trash, garbage, or recycling",
BTYPE == "22" ~ "Vacuum",
BTYPE == "23" ~ "Van, walk-in",
BTYPE == "24" ~ "Van, other",
BTYPE == "25" ~ "Wood chipper",
BTYPE == "26" ~ "Other",
BTYPE == "27" ~ "Not reported",
TRUE ~ NA_character_
))
vius <- vius |>
mutate(MPG = as.numeric(MPG))
vius <- vius |>
mutate(MILESANNL = as.numeric(MILESANNL))
vius <- vius |>
mutate(MILESLIFE = as.numeric(MILESLIFE))
vius <- vius |>
mutate(TRIPOFFROAD = as.numeric(TRIPOFFROAD))
usethis::use_data(vius, overwrite = TRUE)
check()
devtools::load_all(".")
install_github("jashonnew/VIUSr")
devtools::load_all(".")
check()
use_r("data-cleaning-functions")
use_r("data")
View(vius)
devtools::load_all(".")
install()
?vius
library(VIUSr)
?vius
vius
document()
?vius
devtools::load_all(".")
warnings()
document()
?vius
=======
vius <- dplyr::mutate(vius,PRIMPROD = factor(primprod_labels[as.character(vius$PRIMPROD)], levels = primprod_labels))
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint_package()
lintr:::addin_lint()
lintr:::addin_lint_package()
document()
check()
?case_when
check()
?:=
>>>>>>> e8fb5c84fa945a53d91c7b7170c79d0d9aeadefa
