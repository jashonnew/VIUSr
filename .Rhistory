devtools::load_all(".")
warnings()
document()
?vius
vius <- readr::read_csv("data-raw/vius_2021_puf.csv")
vius <- vius |> select(ID, TABWEIGHT, REGSTATE, ACQUIREYEAR, AVGWEIGHT, BTYPE,
ER_COST, FUELTYPE, GM_COST, KINDOFBUS, MILESANNL,
MILESLIFE, MODELYEAR, MPG, PRIMCOMMACT, PRIMPROD,
TRIPOFFROAD)
vius <- vius |> select(ID, TABWEIGHT, REGSTATE, ACQUIREYEAR, AVGWEIGHT, BTYPE,
ER_COST, FUELTYPE, GM_COST, KINDOFBUS, MILESANNL,
MILESLIFE, MODELYEAR, MPG, PRIMCOMMACT, PRIMPROD,
TRIPOFFROAD)
library(tidyverse)
vius <- vius |> select(ID, TABWEIGHT, REGSTATE, ACQUIREYEAR, AVGWEIGHT, BTYPE,
ER_COST, FUELTYPE, GM_COST, KINDOFBUS, MILESANNL,
MILESLIFE, MODELYEAR, MPG, PRIMCOMMACT, PRIMPROD,
TRIPOFFROAD)
vius$MODELYEAR <- stringr::str_replace_all(vius$MODELYEAR, "P", "") |>
as.numeric()
vius$ACQUIREYEAR <- stringr::str_replace_all(df$ACQUIREYEAR, "P", "") |>
as.numeric()
vius$ACQUIREYEAR <- stringr::str_replace_all(vius$ACQUIREYEAR, "P", "") |>
as.numeric()
vius <- vius |>
dplyr::mutate(AVGWEIGHT = as.numeric(AVGWEIGHT)) |>
dplyr::mutate(AVGWEIGHT = case_when(
AVGWEIGHT == 1 ~ 3000,
AVGWEIGHT == 2 ~ 7250,
AVGWEIGHT == 3 ~ 9250,
AVGWEIGHT == 4 ~ 12000,
AVGWEIGHT == 5 ~ 15000,
AVGWEIGHT == 6 ~ 17750,
AVGWEIGHT == 7 ~ 22750,
AVGWEIGHT == 8 ~ 29500,
AVGWEIGHT == 9 ~ 36500,
AVGWEIGHT == 10 ~ 45000,
AVGWEIGHT == 11 ~ 55000,
AVGWEIGHT == 12 ~ 70000,
AVGWEIGHT == 13 ~ 90000,
AVGWEIGHT == 14 ~ 115000,
TRUE ~ 130000
))
vius <- vius |>
dplyr::mutate(GM_COST = as.numeric(GM_COST)) |>
dplyr::mutate(GM_COST = case_when(
GM_COST == 1 ~ 50,
GM_COST == 2 ~ 250,
GM_COST == 3 ~ 750,
GM_COST == 4 ~ 1500,
GM_COST == 5 ~ 3000,
GM_COST == 6 ~ 7500,
TRUE ~ 10000
))
vius <- vius |>
dplyr::mutate(ER_COST = case_when(
ER_COST == "1" ~ 750,
ER_COST == "2" ~ 1500,
ER_COST == "3" ~ 3000,
ER_COST == "4" ~ 7500,
ER_COST == "5" ~ 15000,
ER_COST == "6" ~ 20000,
TRUE ~ 0
))
# Define PRIMPROD labels (from data dictionary)
primprod_labels <- c(
"01" = "Animals and fish, live",
"02" = "Animal feed and animal products",
"03" = "Grains, cereal",
"04" = "Other agricultural products",
"05" = "Basic chemicals",
"06" = "Fertilizers",
"07" = "Pharmaceuticals",
"08" = "Other chemical products",
"09" = "Alcoholic beverages",
"10" = "Bakery/grain products",
"11" = "Meat and seafood",
"12" = "Tobacco products",
"13" = "Other prepared foodstuffs",
"14" = "Logs and raw wood",
"15" = "Paper articles",
"16" = "Printed products",
"17" = "Pulp and paper",
"18" = "Wood products",
"19" = "Articles of base metal",
"20" = "Base metal forms",
"21" = "Nonmetallic mineral products",
"22" = "Electronics and electrical",
"23" = "Furniture and lamps",
"24" = "Machinery",
"25" = "Miscellaneous manufactured",
"26" = "Precision instruments",
"27" = "Textiles and leather",
"28" = "Vehicles and parts",
"29" = "Other transportation equipment",
"30" = "Coal",
"31" = "Crude petroleum",
"32" = "Gravel or stone",
"33" = "Metallic ores",
"34" = "Building stone",
"35" = "Natural sands",
"36" = "Other nonmetallic minerals",
"37" = "Fuel oils",
"38" = "Gasoline and blends",
"39" = "Aviation fuel and kerosene",
"40" = "Ethanol blends",
"41" = "Plastics and rubber",
"42" = "Other petroleum products",
"43" = "Hazardous waste",
"44" = "Other waste and scrap",
"45" = "Recyclable products",
"46" = "Mail and parcels",
"47" = "Empty containers",
"48" = "Mixed freight"
)
vius <- dplyr::mutate(vius, PRIMPROD =
factor(primprod_labels[as.character(vius$PRIMPROD)],
levels = primprod_labels))
vius <- vius |>
mutate(BTYPE = case_when(
BTYPE == "01" ~ "Pickup",
BTYPE == "02" ~ "Minvan",
BTYPE == "03" ~ "Other light van",
BTYPE == "04" ~ "Sport utility vehicle",
BTYPE == "05" ~ "Armored",
BTYPE == "06" ~ "Beverage or bay",
BTYPE == "07" ~ "Box truck",
BTYPE == "08" ~ "Concrete mixer",
BTYPE == "09" ~ "Concrete pumper",
BTYPE == "10" ~ "Conveyor bed",
BTYPE == "11" ~ "Crane",
BTYPE == "12" ~ "Dump",
BTYPE == "13" ~ "Flatbed, stake, or platform",
BTYPE == "14" ~ "Hooklift/roll-off",
BTYPE == "15" ~ "Logging",
BTYPE == "16" ~ "Service, utility",
BTYPE == "17" ~ "Service, other",
BTYPE == "18" ~ "Street sweeper",
BTYPE == "19" ~ "Tank, liquid or gases",
BTYPE == "20" ~ "Tow/wrecker",
BTYPE == "21" ~ "Trash, garbage, or recycling",
BTYPE == "22" ~ "Vacuum",
BTYPE == "23" ~ "Van, walk-in",
BTYPE == "24" ~ "Van, other",
BTYPE == "25" ~ "Wood chipper",
BTYPE == "26" ~ "Other",
BTYPE == "27" ~ "Not reported",
TRUE ~ NA_character_
))
vius <- vius |>
mutate(MPG = as.numeric(MPG))
vius <- vius |>
mutate(MILESANNL = as.numeric(MILESANNL))
vius <- vius |>
mutate(MILESLIFE = as.numeric(MILESLIFE))
vius <- vius |>
mutate(TRIPOFFROAD = as.numeric(TRIPOFFROAD))
vius <- vius |>
dplyr::mutate(FUELTYPE = dplyr::case_when(
fuel_code == "10" ~ "Gasoline",
fuel_code == "20" ~ "Diesel",
fuel_code == "31" ~ "Compressed natural gas",
fuel_code == "32" ~ "Liquified natural gas",
fuel_code == "33" ~ "Propane",
fuel_code == "34" ~ "Alcohol fuels",
fuel_code == "35" ~ "Electricity",
fuel_code == "36" ~ "Combination",
fuel_code == "40" ~ "Not reported",
TRUE ~ NA_character_
))
vius <- vius |>
dplyr::mutate(KINDOFBUS = dplyr::case_when(
KINDOFBUS == "01" ~ "Accommodation and food services (for immediate consumption)",
KINDOFBUS == "02" ~ "Waste management and remediation",
KINDOFBUS == "03" ~ "Landscaping",
KINDOFBUS == "04" ~ "Other administrative and support and waste management and remediation services",
KINDOFBUS == "05" ~ "Agriculture (crop and animal production)",
KINDOFBUS == "06" ~ "Fishing, hunting, trapping",
KINDOFBUS == "07" ~ "Forestry and logging",
KINDOFBUS == "08" ~ "Other agriculture, forestry, fishing, and hunting",
KINDOFBUS == "09" ~ "Arts, entertainment, or recreation services",
KINDOFBUS == "10" ~ "Construction - residential",
KINDOFBUS == "11" ~ "Construction - non-residential",
KINDOFBUS == "12" ~ "Other construction",
KINDOFBUS == "13" ~ "Fuel wholesale or distribution",
KINDOFBUS == "14" ~ "Information services (includes telephone and television)",
KINDOFBUS == "15" ~ "Manufacturing",
KINDOFBUS == "16" ~ "Mining (includes quarrying, well operations, and beneficiating)",
KINDOFBUS == "17" ~ "Retail trade",
KINDOFBUS == "18" ~ "For-hire transportation (of goods or people)",
KINDOFBUS == "19" ~ "Warehousing and storage",
KINDOFBUS == "20" ~ "Other transportation and warehousing",
KINDOFBUS == "21" ~ "Utilities (includes electric power, natural gas, steam supply, water supply, and sewage removal)",
KINDOFBUS == "22" ~ "Vehicle leasing or rental (includes short-term rentals)",
KINDOFBUS == "23" ~ "Wholesale trade",
KINDOFBUS == "24" ~ "Other services, including advertising, real estate, nonvehicle leasing or rental, educational, health care, social assistance, finance, insurance, professional, scientific, or technical services",
KINDOFBUS == "25" ~ "Other business type",
KINDOFBUS == "26" ~ "Not reported",
TRUE ~ NA_character_
))
vius <- vius |>
dplyr::mutate(PRIMCOMMACT = dplyr::case_when(
PRIMCOMMACT == "11" ~ "Transporting goods/products belonging to owner or owner's company",
PRIMCOMMACT == "12" ~ "Transporting goods/products belonging to another person/company",
PRIMCOMMACT == "13" ~ "Transporting online local goods/products",
PRIMCOMMACT == "20" ~ "Transporting tools related to owner's business",
PRIMCOMMACT == "30" ~ "Transporting paying passengers",
PRIMCOMMACT == "40" ~ "Transporting non-paying passengers",
PRIMCOMMACT == "50" ~ "Rental (daily and other short term)",
PRIMCOMMACT == "60" ~ "Other commercial activity",
PRIMCOMMACT == "65" ~ "Non-commercial use",
PRIMCOMMACT == "70" ~ "Not reported",
TRUE ~ NA_character_
))
usethis::use_data(vius, overwrite = TRUE)
library(devtools)
use_r("vius_raw_sample")
?head
vius_raw_sample <- readr::read_csv("data-raw")
vius_raw_sample <- readr::read_csv("data-raw/vius_2021_puf.csv")
vius_raw_sample <- vius_raw_sample |>
head(n = 100)
usethis::use_data(vius_raw_sample, overwrite = TRUE)
document()
document()
install()
install()
getwd()
document()
install()
use_data("vius_raw_sample")
use_data_raw("vius_raw_sample")
## code to prepare `vius_raw_sample` dataset goes here
vius_raw_sample <- readr::read_csv("data-raw/vius_2021_puf.csv")
vius_raw_sample <- vius_raw_sample |>
head(n = 100)
usethis::use_data(vius_raw_sample, overwrite = TRUE)
document()
install()
lintr:::addin_lint_package()
devtools::load_all(".")
document()
document()
document()
install()
install(clean = TRUE)
devtools::install(clean = TRUE)
remove.packages("VIUSr")
install.packages("VIUSr", type = "source")
check()
lintr:::addin_lint_package()
lintr:::addin_lint_package()
document()
doxument()
document()
lintr:::addin_lint()
lintr:::addin_lint()
document()
lintr:::addin_lint_package()
lintr:::addin_lint()
install.packages("jashonnew/VIUSr")
install_github("jashonnew/VIUSr")
check()
library(devtools)
lintr:::addin_lint_package()
lintr:::addin_lint_package()
document()
library(devtools)
document()
lintr:::addin_lint_package()
check()
use_testthat()
use_test("general.R")
test()
test()
load_all()
vius_raw <- readRDS("../data/vius_raw_sample.rda")
vius_raw <- readRDS("data/vius_raw_sample.rda")
getwd()
test()
test()
View(vius_raw_sample)
test()
test()
test()
test()
document()
lintr:::addin_lint_package()
lintr:::addin_lint()
check()
check()
check()
lintr:::addin_lint_package()
document()
library(devtools)
document()
document()
lintr:::addin_lint_package()
vignette()
vignette("VIUSr")
vignette("VIUSr_vignette")
?vignette
vignette(package = "VIUSr")
vignette(package = "VIUSr")
vignette("VIUSr_vignette")
load_all()
vignette("VIUSr_vignette")
install(build_vignettes = TRUE)
get_state_graphs(vius, PRIMPROD, state = c("CA"))
get_state_graphs(vius, PRIMPROD, state = c("CA"))
?select
get_state_graphs(vius, PRIMPROD, state = c("CA"))
lintr:::addin_lint_package()
get_state_graphs(vius, PRIMPROD, state = c("CA"))
get_state_graphs(vius, PRIMPROD, state = c("CA"))
#' @param x_plot_label A character string specifying the label for the x-axis
#'    (which will appear vertically due to `coord_flip`).
#' @param y_plot_label A character string specifying the label for the y-axis.
#' @param sleep_time Time in seconds to pause between plots. Default is 2
#'    seconds.
#' @param dataset The cleaned VIUS object to be mapped
#'
#'
#' @return No return value. The function produces plots
#' @export
get_state_graphs <- function(dataset, db_header, states = NULL,
plot_title = "State - ",
x_plot_label = "x axis", y_plot_label = "y axis",
sleep_time = 2) {
# Select only needed columns
custom_data <- dplyr::select(dataset, TABWEIGHT, REGSTATE, {{ db_header }})
# Determine which states to process
selected_states <- if (is.null(states)) {
sort(unique(custom_data$REGSTATE))
} else {
states
}
for (state in selected_states) {
state_data <- dplyr::filter(
custom_data, REGSTATE == state
)
summary_data <- state_data |>
dplyr::group_by({{ db_header }}) |>
dplyr::summarise(estimated_vehicles = sum(TABWEIGHT), .groups = "drop") |>
dplyr::arrange(dplyr::desc(estimated_vehicles))
p <- ggplot2::ggplot(
summary_data,
ggplot2::aes(
x = stats::reorder({{ db_header }}, estimated_vehicles),
y = estimated_vehicles
)
) +
ggplot2::geom_bar(stat = "identity", fill = "steelblue") +
ggplot2::coord_flip() +
ggplot2::labs(
title = paste(plot_title, state),
x = x_plot_label,
y = y_plot_label,
fill = x_plot_label
) +
ggplot2::scale_fill_manual(
values = grDevices::
topo.colors(length(unique(summary_data[[{{ db_header }}]])))
) +
ggplot2::theme_minimal(base_size = 13) +
ggplot2::theme(
plot.title = ggplot2::element_text(color = "white"),
axis.title = ggplot2::element_text(color = "white"),
axis.text = ggplot2::element_text(color = "white", size = 9),
legend.position = "none",
panel.grid.major = ggplot2::element_line(color = "gray30"),
panel.grid.minor = ggplot2::element_blank(),
panel.background = ggplot2::element_rect(fill = "black"),
plot.background = ggplot2::element_rect(fill = "black")
)
print(p)
base::Sys.sleep(sleep_time)
}
}
get_state_graphs(vius, PRIMPROD, state = c("CA"))
#' @param x_plot_label A character string specifying the label for the x-axis
#'    (which will appear vertically due to `coord_flip`).
#' @param y_plot_label A character string specifying the label for the y-axis.
#' @param sleep_time Time in seconds to pause between plots. Default is 2
#'    seconds.
#' @param dataset The cleaned VIUS object to be mapped
#'
#'
#' @return No return value. The function produces plots
#' @export
get_state_graphs <- function(dataset, db_header, states = NULL,
plot_title = "State - ",
x_plot_label = "x axis", y_plot_label = "y axis",
sleep_time = 2) {
# Select only needed columns
custom_data <- dplyr::select(dataset, TABWEIGHT, REGSTATE, {{ db_header }})
# Determine which states to process
selected_states <- if (is.null(states)) {
sort(unique(custom_data$REGSTATE))
} else {
states
}
for (state in selected_states) {
state_data <- dplyr::filter(
custom_data, REGSTATE == state
)
summary_data <- state_data |>
dplyr::group_by({{ db_header }}) |>
dplyr::summarise(estimated_vehicles = sum(TABWEIGHT), .groups = "drop") |>
dplyr::arrange(dplyr::desc(estimated_vehicles))
p <- ggplot2::ggplot(
summary_data,
ggplot2::aes(
x = stats::reorder({{ db_header }}, estimated_vehicles),
y = estimated_vehicles
)
) +
ggplot2::geom_bar(stat = "identity", fill = "steelblue") +
ggplot2::coord_flip() +
ggplot2::labs(
title = paste(plot_title, state),
x = x_plot_label,
y = y_plot_label,
fill = x_plot_label
) +
ggplot2::theme_minimal(base_size = 13) +
ggplot2::theme(
plot.title = ggplot2::element_text(color = "white"),
axis.title = ggplot2::element_text(color = "white"),
axis.text = ggplot2::element_text(color = "white", size = 9),
legend.position = "none",
panel.grid.major = ggplot2::element_line(color = "gray30"),
panel.grid.minor = ggplot2::element_blank(),
panel.background = ggplot2::element_rect(fill = "black"),
plot.background = ggplot2::element_rect(fill = "black")
)
print(p)
base::Sys.sleep(sleep_time)
}
}
get_state_graphs(vius, PRIMPROD, state = c("CA"))
#' @param x_plot_label A character string specifying the label for the x-axis
#'    (which will appear vertically due to `coord_flip`).
#' @param y_plot_label A character string specifying the label for the y-axis.
#' @param sleep_time Time in seconds to pause between plots. Default is 2
#'    seconds.
#' @param dataset The cleaned VIUS object to be mapped
#'
#'
#' @return No return value. The function produces plots
#' @export
get_state_graphs <- function(dataset, db_header, states = NULL,
plot_title = "State - ",
x_plot_label = "x axis", y_plot_label = "y axis",
sleep_time = 2) {
# Select only needed columns
custom_data <- dplyr::select(dataset, TABWEIGHT, REGSTATE, {{ db_header }})
# Determine which states to process
selected_states <- if (is.null(states)) {
sort(unique(custom_data$REGSTATE))
} else {
states
}
for (state in selected_states) {
state_data <- dplyr::filter(
custom_data, REGSTATE == state, !is.na({{ db_header }})
)
summary_data <- state_data |>
dplyr::group_by({{ db_header }}) |>
dplyr::summarise(estimated_vehicles = sum(TABWEIGHT), .groups = "drop") |>
dplyr::arrange(dplyr::desc(estimated_vehicles))
p <- ggplot2::ggplot(
summary_data,
ggplot2::aes(
x = stats::reorder({{ db_header }}, estimated_vehicles),
y = estimated_vehicles
)
) +
ggplot2::geom_bar(stat = "identity", fill = "steelblue") +
ggplot2::coord_flip() +
ggplot2::labs(
title = paste(plot_title, state),
x = x_plot_label,
y = y_plot_label,
fill = x_plot_label
) +
ggplot2::theme_minimal(base_size = 13) +
ggplot2::theme(
plot.title = ggplot2::element_text(color = "white"),
axis.title = ggplot2::element_text(color = "white"),
axis.text = ggplot2::element_text(color = "white", size = 9),
legend.position = "none",
panel.grid.major = ggplot2::element_line(color = "gray30"),
panel.grid.minor = ggplot2::element_blank(),
panel.background = ggplot2::element_rect(fill = "black"),
plot.background = ggplot2::element_rect(fill = "black")
)
print(p)
base::Sys.sleep(sleep_time)
}
}
get_state_graphs(vius, PRIMPROD, state = c("CA"))
get_state_maps(vius, MPG)
vignette(package = "VIUSr")
install(build_vignettes = TRUE)
vignette()
vignette("VIUSR_vignette")
vignette("VIUSr_vignette")
get_state_graphs(vius, BTYPE, states = c("UT, NV"))
get_state_graphs(vius, BTYPE, states = c("UT, NV"))
get_state_graphs(vius, BTYPE, states = c("UT", "NV"))
get_state_graphs(vius, BTYPE, states = c("UT", "NV", "TX"))
